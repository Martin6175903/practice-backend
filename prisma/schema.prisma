generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String
  name      String
  password  String
  images    String[]

  exerciseLogs ExerciseLog[]
  workoutLogs  WorkoutLog[]

  @@map("user")
}

model Workout {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  name        String
  exercises   Exercise[]   @relation("ExerciseToWorkout")
  workoutLogs WorkoutLog[]
}

model Exercise {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  name          String
  times         Int
  iconPath      String       @map("icon_path")
  workouts      Workout[]    @relation("ExerciseToWorkout")
  exerciseLog   ExerciseLog? @relation(fields: [exerciseLogId], references: [id])
  exerciseLogId Int?
}

model ExerciseLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean        @default(false) @map("is_completed")
  times       ExerciseTime[]
  exercise    Exercise[]

  user         User?       @relation(fields: [userId], references: [id])
  userId       Int?        @map("user_id")
  workoutLog   WorkoutLog? @relation(fields: [workoutLogId], references: [id])
  workoutLogId Int?        @map("workout_log_id")

  @@map("Exercise_log")
}

model ExerciseTime {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  exerciseLog   ExerciseLog? @relation(fields: [exerciseLogId], references: [id])
  exerciseLogId Int?         @map("exercise_log_id")

  weight      Int     @default(0)
  repeat      Int     @default(0)
  isCompleted Boolean @default(false) @map("is_completed")

  @@map("Exercise_time")
}

model WorkoutLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean @default(false) @map("is_completed")

  exerciseLogs ExerciseLog[]

  workout   Workout? @relation(fields: [workoutId], references: [id])
  workoutId Int?     @map("workout_id")

  User   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  @@map("Workout_log")
}
